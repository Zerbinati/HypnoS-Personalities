1Ô∏è‚É£ Influenza dell'aggressivit√† (bonus per la mobilit√† centrale dei pezzi)
cpp
Copia
Modifica
Score centralControl = mobility[WHITE] - mobility[BLACK];
score += scale_by(centralControl, dynamicAggressiveness / 10);
‚úÖ Cosa fa?

Misura quanto bene i pezzi controllano il centro della scacchiera.
Il valore di centralControl √® positivo se il Bianco controlla pi√π il centro, negativo se lo fa il Nero.
Se Aggressiveness √® alto, il motore premia un buon controllo centrale.
üìå Effetto in partita:

Un giocatore con alto Aggressiveness cercher√† di dominare il centro.
Un valore basso porta a uno stile pi√π posizionale e meno dinamico.
2Ô∏è‚É£ Bonus per le torri sulle colonne aperte
cpp
Copia
Modifica
Score openFiles = make_score(
    pos.is_on_semiopen_file(WHITE, pos.square<ROOK>(WHITE)) ? dynamicOpenFileControl : 0,
    pos.is_on_semiopen_file(BLACK, pos.square<ROOK>(BLACK)) ? dynamicOpenFileControl : 0
);
score += scale_by(openFiles, dynamicRiskTaking / 10);
‚úÖ Cosa fa?

Controlla se le torri sono posizionate su colonne semiaperte.
Se OpenFileControl √® alto, il motore d√† pi√π importanza a questo criterio.
L'influenza di questo valore √® regolata anche da RiskTaking.
üìå Effetto in partita:

Un motore con alto RiskTaking user√† pi√π le colonne aperte per attaccare.
Se RiskTaking √® basso, sar√† pi√π cauto nel posizionare le torri.
3Ô∏è‚É£ Penalit√† per il re esposto
cpp
Copia
Modifica
Score exposedKing = make_score(pos.king_safety(WHITE), pos.king_safety(BLACK));
score -= scale_by(exposedKing, dynamicKingSafety / 20);
‚úÖ Cosa fa?

Misura quanto √® sicuro il re di ciascun colore.
Se KingSafety √® alto, il motore eviter√† di lasciare il re esposto.
üìå Effetto in partita:

Se KingSafety √® alto, il motore arrocca presto e mantiene il re protetto.
Se √® basso, potrebbe rischiare arrocci tardivi o addirittura restare al centro.
4Ô∏è‚É£ Mobilit√† dei pezzi
cpp
Copia
Modifica
Score localMobility = make_score(mobility[WHITE], mobility[BLACK]);
score += scale_by(localMobility, dynamicPieceActivity / 10);
‚úÖ Cosa fa?

Misura quanti movimenti hanno i pezzi di ogni colore.
Se PieceActivity √® alto, il motore valorizza le posizioni con pi√π libert√† di movimento.
üìå Effetto in partita:

Un motore con alta PieceActivity cercher√† spazi aperti e manovre attive.
Se √® bassa, giocher√† in modo pi√π chiuso e bloccato.
5Ô∏è‚É£ Solidit√† della struttura pedonale
cpp
Copia
Modifica
score += scale_by(pe->pawn_score(WHITE) - pe->pawn_score(BLACK), dynamicPawnStructure / 10);
‚úÖ Cosa fa?

Valuta la qualit√† della struttura pedonale.
Penalizza pedoni doppiati, isolati o deboli.
üìå Effetto in partita:

Un motore con alto PawnStructure eviter√† di indebolire i pedoni.
Se √® basso, potrebbe sacrificare la struttura per ottenere vantaggi dinamici.
6Ô∏è‚É£ Bonus per la coppia di cavalli
cpp
Copia
Modifica
if (pos.count<KNIGHT>(WHITE) >= 2 || pos.count<KNIGHT>(BLACK) >= 2) {
    score += make_score(dynamicKnightPair, dynamicKnightPair);
}
‚úÖ Cosa fa?

Premia avere due cavalli.
üìå Effetto in partita:

Un motore con alto KnightPair terr√† i cavalli sulla scacchiera.
Se √® basso, potrebbe scambiarli pi√π facilmente.
7Ô∏è‚É£ Bonus per la coppia di alfieri
cpp
Copia
Modifica
if (pos.count<BISHOP>(WHITE) >= 2 || pos.count<BISHOP>(BLACK) >= 2) {
    score += make_score(dynamicBishopPair, dynamicBishopPair);
}
‚úÖ Cosa fa?

Premia la coppia di alfieri, utile nelle posizioni aperte.
üìå Effetto in partita:

Se BishopPair √® alto, il motore eviter√† di scambiare gli alfieri.
Se √® basso, non si preoccuper√† troppo di perdere la coppia.
8Ô∏è‚É£ Bonus per uno stile difensivo
cpp
Copia
Modifica
score += make_score(dynamicDefense / 2, dynamicDefense / 2);
‚úÖ Cosa fa?

Se Defense √® alto, il motore tender√† a difendersi meglio e prendere meno rischi.
üìå Effetto in partita:

Un motore difensivo accetta pi√π facilmente posizioni solide ma passive.
9Ô∏è‚É£ Bonus per la conoscenza dei finali
cpp
Copia
Modifica
if (pos.non_pawn_material(WHITE) + pos.non_pawn_material(BLACK) <= 10) { 
    score += make_score(dynamicEndgameKnowledge / 5, dynamicEndgameKnowledge / 5);
}
‚úÖ Cosa fa?

Se ci sono meno di 10 pezzi sulla scacchiera, viene attivato un bonus per i finali.
üìå Effetto in partita:

Se EndgameKnowledge √® alto, il motore gioca meglio i finali.
Se √® basso, potrebbe avere difficolt√† in questa fase.
üîü Bonus per sacrifici di pezzi
cpp
Copia
Modifica
if (pieceSacrifice != 0 && pos.game_ply() > 10) {  
    Score attackBonus = make_score(dynamicPieceSacrifice / 2, dynamicPieceSacrifice / 4);
    score += attackBonus;
}
‚úÖ Cosa fa?

Se PieceSacrifice √® alto, il motore √® pi√π propenso ai sacrifici tattici.
üìå Effetto in partita:

Con un valore alto, il motore giocher√† come Tal, con sacrifici dinamici.
Se √® basso, sar√† pi√π prudente.
üîü+1 Penalit√† per posizioni chiuse
cpp
Copia
Modifica
Score closedPositions = make_score(
    pos.count<PAWN>(WHITE) - pos.count<PAWN>(BLACK),
    pos.count<PAWN>(BLACK) - pos.count<PAWN>(WHITE)
);
score += scale_by(closedPositions, dynamicPositionClosure / 10);
‚úÖ Cosa fa?

Se PositionClosure √® alto, il motore favorisce posizioni chiuse.
üìå Effetto in partita:

Un motore con valore alto giocher√† come Petrosian, chiudendo la posizione.

Influenza sulla tendenza agli scambi
cpp
Copia
Modifica
// Influenza sulla tendenza agli scambi (usiamo il materiale totale)
Score tradePreference = make_score(pos.non_pawn_material(WHITE), pos.non_pawn_material(BLACK));
score += scale_by(tradePreference, dynamicPieceTrade / 10);
‚úÖ Cosa fa?

Misura la quantit√† di materiale non pedonale (pezzi) per ciascun giocatore.
Se PieceTrade √® alto, il motore favorisce gli scambi di pezzi.
Se √® basso, il motore eviter√† gli scambi e manterr√† i pezzi sulla scacchiera.
üìå Effetto in partita:

Un motore con alto PieceTrade sar√† pi√π incline a semplificare la posizione scambiando i pezzi.
Un motore con basso PieceTrade giocher√† come Tal o Kasparov, mantenendo il massimo numero di pezzi attivi.
2Ô∏è‚É£ Bonus per attacchi al re
cpp
Copia
Modifica
// Bonus per attacchi al re (contiamo gli attaccanti sul re con popcount)
Score attackOnKing = make_score(
    popcount(pos.attackers_to(pos.king_square(WHITE))),
    popcount(pos.attackers_to(pos.king_square(BLACK)))
);
score += scale_by(attackOnKing, dynamicKingAttack / 10);
‚úÖ Cosa fa?

Conta il numero di pezzi che attaccano il re avversario.
Se KingAttack √® alto, il motore valorizza attacchi diretti al re.
Se √® basso, l‚Äôaggressivit√† sugli arrocci √® ridotta.
üìå Effetto in partita:

Se il valore KingAttack √® alto, il motore cercher√† attacchi diretti al re.
Se √® basso, il motore preferir√† posizioni pi√π posizionali e meno speculative.
3Ô∏è‚É£ Profilassi (prevenzione dei piani avversari)
cpp
Copia
    // Profilassi (basata sulla mobilit√† dei pezzi)
    Score prophylacticPlay = make_score(
        pos.psq_score(),  // Valore per il Bianco
        pos.psq_score()   // Valore per il Nero
    );
    score -= scale_by(prophylacticPlay, dynamicProfilaxis / 10);
‚úÖ Cosa fa?

Usa il Piece-Square Table (PST) Score per valutare quanto bene sono posizionati i pezzi sulla scacchiera.
Se Profilaxis √® alto, il motore dar√† pi√π peso a posizioni sicure e preventive.
üìå Effetto in partita:

Un motore con alto Profilaxis sar√† pi√π prudente e difensivo, evitando di lasciare pezzi vulnerabili.
Se il valore √® basso, il motore sar√† pi√π dinamico e meno attento ai piani dell'avversario.
4Ô∏è‚É£ Sacrifici posizionali
cpp
Copia
Modifica
// Sacrifici posizionali
if (positionalSacrifice != 0 && pos.game_ply() > 10) {
    Score sacBonus = make_score(dynamicPositionalSacrifice / 2, dynamicPositionalSacrifice / 4);
    score += sacBonus;
}
‚úÖ Cosa fa?

Se PositionalSacrifice √® alto, il motore √® pi√π propenso a sacrificare materiale per ottenere vantaggi strategici.
Il sacrificio viene incoraggiato solo dopo 10 mosse, per evitare errori precoci.
üìå Effetto in partita:

Se PositionalSacrifice √® alto, il motore giocher√† come Tal o Shirov, sacrificando pezzi per l‚Äôiniziativa.
Se √® basso, il motore sar√† pi√π materialista, evitando sacrifici rischiosi.
5Ô∏è‚É£ Tendenza a preferire Cavalli o Alfieri
cpp
Copia
Modifica
// Tendenza a preferire Cavalli o Alfieri
Score bishopVsKnight = make_score(
    dynamicKnightVsBishop * (pos.count<KNIGHT>(WHITE) - pos.count<BISHOP>(WHITE)),
    dynamicKnightVsBishop * (pos.count<KNIGHT>(BLACK) - pos.count<BISHOP>(BLACK))
);
score += bishopVsKnight;
‚úÖ Cosa fa?

Se KnightVsBishop √® positivo, il motore preferisce i cavalli.
Se √® negativo, favorisce gli alfieri.
üìå Effetto in partita:

Se KnightVsBishop > 0, il motore eviter√† scambi di cavalli e favorir√† posizioni chiuse.
Se KnightVsBishop < 0, il motore preferir√† posizioni aperte e giochi con gli alfieri.
6Ô∏è‚É£ Influenza sulla spinta dei pedoni
cpp
Copia
Modifica
// Influenza sulla spinta dei pedoni
Score pawnPushes = make_score(pos.count<PAWN>(WHITE), pos.count<PAWN>(BLACK));
score += scale_by(pawnPushes, dynamicPawnPush / 10);
‚úÖ Cosa fa?

Misura quanti pedoni si sono mossi rispetto alla posizione iniziale.
Se PawnPush √® alto, il motore dar√† pi√π importanza a spingere i pedoni.
üìå Effetto in partita:

Un motore con alto PawnPush giocher√† come Spassky o Fischer, cercando di aprire le linee.
Se √® basso, il motore manterr√† la struttura pedonale solida e compatta.